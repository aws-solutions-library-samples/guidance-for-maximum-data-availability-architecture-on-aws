What are we deploying?
=======================
The main idea is to make your application resilient to database failures.
This is how it looks like for our Cafe Demo Application
TODO: link image "assets/CafeAppFullResiliencyToDBFailuresDemo.jpeg"
The video, detailed explanations and build guide follow.

You can read about Application-level Resiliency on 
my LinkedIn page "linkedin.com/in/denys-dobrelya/":
- Working Demo Application walkthrough: 
   - https://www.linkedin.com/posts/activity-7222454561465073664-metD
     TODO: Full-Res Video - upload to "assets" and link here
- Reference Architecture Diagram, describing all moving parts:
   - https://www.linkedin.com/feed/update/urn:li:activity:7248129905404616704
     TODO: Full-Res v3.0 Diagram - upload to "assets" and link here
- Main ideas behind "Maximum Data Availability Architecture" (MD2A):
   - https://www.linkedin.com/pulse/building-resilient-applications-leveraging-modern-high-denys-dobrelya-pcpqf
   - https://www.linkedin.com/pulse/building-future-why-your-applications-need-data-denys-dobrelya-uzhaf
   - https://www.linkedin.com/pulse/business-summary-deploying-aurora-global-cross-region-denys-dobrelya-o4wpf
   - https://www.linkedin.com/pulse/multi-region-resilient-application-recipe-denys-dobrelya-cwjrf
   - https://www.linkedin.com/pulse/building-cloud-fortress-denys-dobrelya-b30wf
- Fully functional Cafe Demo website is still available on https://cafe.olddba.people.aws.dev,
but we were asked to restrict public access. If you want to try it - let me know! 
(It looks and works exactly like in my video above.)

Cafe Demo App deployment process
================================= 

Prepare the account
---------------------
-  Get new AWS Account
   So you don't mess up your things at work!
-  Use N.Virginia "us-east-1" region
   You may use any region you wish, but then you need to change the default value of CloudFormation parameter "HostAMI" 
-  Create a KeyPair and name it "cafe-keypair" or provide your own name as CloudFormation parameter "CafeKey"
-  Run the CloudFormation (CF from now) and deploy the stack "Cafe"
   Use file "deployment/Cafe_template.yaml"
   Aurora DB creation takes the longest time - be patient for about 15 min.
   Once everything is ready read the "Output" section and add your own IP to the Security Group.
- Connect to EC2 via ssh using your KeyPair.
   This is your Application server and all Flask App code will be deployed here.
   It is already configured to connect to empty Aurora PG database, just run "psql" from command line.
   This Git Repo code had already been cloned into "/home/ec2-user/md2a/rananeeti/olddba".
   Go there.
- Now we need to deploy this target stack, as explained in https://www.linkedin.com/pulse/building-resilient-applications-leveraging-modern-high-denys-dobrelya-pcpqf
   TODO: link image "assets/CafeAppStackMapping.png"
  This image "maps" old (but not useless!) "legacy" Enterprise world with newer lightweight approach.

Deploy Web and App Infrastructure
----------------------------------
As "ec2-user" install necessary Python modules:
- $ pip3 install boto3 oauthlib Flask Flask-SQLAlchemy Flask-OAuthlib Gunicorn psycopg2-binary
Configure AWS CLI credentials.
The recommended practice is to use IAM Identity Center authentication.
https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html
- $ cd ~
- $ aws configure
AWS Access Key ID [None]: Key-from-your-IAM-User
AWS Secret Access Key [None]: Secret-from-your-IAM-User
Default region name [None]: us-east-1
Default output format [None]: text
$ aws s3 ls
2024-11-26 05:14:32 cf-templates-1j84y89c4zr7w-ap-southeast-2
2024-11-26 06:42:48 cf-templates-1j84y89c4zr7w-us-east-1

DBServer
---------
As "ec2-user", connect to Aurora DB from the App Server.
- psql
  cafedb=> \c
psql (15.8, server 15.4)
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, compression: off)
You are now connected to database "cafedb" as user "postgres".
  cafedb=>  create user cafeapp password 'Welcome1';
  cafedb=>  grant all on database cafedb to cafeapp; 
  cafedb=> \c cafedb cafeapp
psql (15.8, server 15.4)
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, compression: off)
You are now connected to database "cafedb" as user "cafeapp".
  cafedb=>  create schema cafe authorization cafeapp;
  cafedb=>  create table cafe.ordersraw(
 ordrid SERIAL PRIMARY KEY,
 ordrdgst char(20) UNIQUE NOT NULL, -- blake2b hash digest value
 ordrname varchar(40) NOT NULL, -- who ordered
 ordrppl integer NOT NULL, -- how many people to attend
 ordrdttm timestamp(0) NOT NULL, -- Date / Time no TZ no Seconds
 ordrtxt varchar(200) -- Optional notes
);

WebServer
---------
Become root on your EC2 App Server.
- # cd /
- # tar xzvpf /home/ec2-user/md2a/rananeeti/olddba/assets/v1.1.tgz # Please preserve permissions with "p"!
- # cd ~
- # apachectl start
- # apachectl status
   .... should see workers
From your workstation open in Firefox your EC2 host address.
You should see "home Cafe" landing webpage, delivered over plain HTTP. Setting up your own domain with Route53 and registering all necessary certificates to terminate TLS at ELB is beyond scope of this demo.  My Demo website https://cafe.olddba.people.aws.dev provides that functionality and Customer workshop may be organised to review full details.
- # systemctl enable httpd.service  # So it will restart after reboot.

AppServer
----------
Continue as root
- # pip3 install gunicorn
- # systemctl enable gunicorn
- # systemctl start gunicorn
- # systemctl status gunicorn
   .... should see workers
- # systemctl enable rananeeti_tx_cache
- # systemctl start rananeeti_tx_cache
- # systemctl status rananeeti_tx_cache
   .... should see "Started rananeeti_tx_cache.service - RANANEETI Caching layer."

End of Deployment
------------------
From your workstation open in Firefox your EC2 host address and start making "reservations", while ticking the checkbox to test Database failures.

Now it's a good time to play around with the cafe Demo website and to review its code. Note that "Rananeeti" Data Platform is the only interface to all sort of data stores, relational and not. It also has its own connection pool with transaction processing logic smart enough to survive even full database outages. That is the core concept of Maximum Data Availability Architecture.

Thank you for visiting! 






